#!/usr/bin/env python3
import os
from os.path import basename, splitext
import subprocess
import sys

import fire

def all_chapters():
    """
    Parse the structure file (in the top level of the repo) to get a
    list of chapters in the order they appear in the book.

    Empty lines and lines starting from # in the structure file are
    ignored.
    """
    with open("structure", "r") as structure:
        return [
            chapter.strip() for chapter in structure
            if len(chapter) > 0
            if chapter[0] != "#"
            if not chapter.isspace()
        ]


def chapter_name(chapter):
    """
    We want accept several different formats to specify the chpater:

      • chapter1
      • chapter1/chapter1
      • chapter1/chapter1.md
      • book/chapter1/chapter1.md

    This function takes an input formatted like above and normalizes
    to just the name of the chapter (ie chapter1 in the above example).
    """
    name, _ = splitext(basename(chapter))
    return name
    

def run_pandoc(out, to, tf_format, chapter):
    book = chapter is None
    toc = ["--toc"] if book else []

    extension = "tex" if to == "latex" else to

    if tf_format:
        print("Using T&F format.")

    if book:
        chapters = [f"{name}/{name}.md" for name in all_chapters()]

        if out is None:
            out = f"Foundations of Reinforcement Learning.{extension}"

        chapter_list = "\n".join(chapters)
        print(f"Building {out} from:\n{chapter_list}")
    else:
        name = chapter_name(chapter)
        chapters = [f"{name}/{name}.md"]

        if out is None:
            out = f"{name}.{extension}"

        print(f"Converting book/{chapters[0]} to {out}")

    tf_settings = [
        "--metadata", "tf-format",
        "--lua-filter", "../bin/remove-hyperref.lua"
    ] if tf_format else []

    os.chdir("book")
    subprocess.run([
        "pandoc",
        "--to", to,
        "--output", f"../{out}",
        "--metadata", "chapters",
        "--metadata", "title='Foundations of Reinforcement Learning with Applications in Finance'",
        "--metadata", "author='Ashwin Rao, Tikhon Jelvis'",
        "--metadata", "reference-section-title='Bibliography'",
        "--filter", "pandoc-crossref",
        "--pdf-engine", "xelatex",
        "--template", "../templates/latex.template",
        "--top-level-division", "part",
        "--lua-filter", "../bin/alon-style-quotes.lua",
        "--citeproc",
        "--bibliography", "bibliography.bib",
    ] + toc + tf_settings + chapters)
    os.chdir("..")

def main(chapter=None, *, tf_format=False, out=None, to="pdf"):
    """
    Usage: bin/to-pdf [chapter] [--tf-format] [--out|-o=<out-path>] [--to=pdf|tex]

    Compile either the entire book or a single chapter.  Needs to run
    in a Nix shell and from the top-level directory fo the repo.
    """
    if "DEJA_VU_DIRECTORY" not in os.environ:
        print("DEJA_VU_DIRECTORY variable not set.")
        print("Try restarting your Nix shell.")
        sys.exit(1)

    run_pandoc(out, to, tf_format, chapter)

if __name__ == "__main__":
    fire.Fire(main)
